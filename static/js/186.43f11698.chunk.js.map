{"version":3,"file":"static/js/186.43f11698.chunk.js","mappings":"8NAkDA,UA7CgB,WACd,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAsB,mCAAG,WAAMN,GAAN,uFAEX,UAFW,UAGAO,EAAAA,EAAAA,IAAuBP,EADlC,WAFW,OAGrBQ,EAHqB,OAI3BJ,EAAeI,EAAaC,SAJD,gDAM3BC,QAAQC,IAAR,MAN2B,yDAAH,sDAS5BL,EAAuBN,EACxB,GAAE,CAACA,IACJ,IAAMY,EAAUT,EAAYU,KAAI,gBAAGb,EAAH,EAAGA,GAAIc,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC9B,2BACE,qCAAaD,MACb,uBAAIC,MAFGf,EADqB,IAMhC,OACE,8BACE,0BACE,wBACGY,EAAQI,OACPJ,GAEA,4EAMX,C,oLCtCKK,EAAW,gCACXC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRC,IAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFZ,cACzBG,EADyB,yBAKxBA,EAASC,KAAKb,SALU,2CAAH,qDAQjBc,EAAY,mCAAG,WAAMvB,GAAN,uFACHoB,IAAAA,IAAA,UAClBH,EADkB,iBACDjB,EADC,oBACakB,EADb,oBADG,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZf,EAAsB,mCAAG,WAAOP,EAAIwB,GAAX,uFACbJ,IAAAA,IAAA,UAClBH,EADkB,iBACDjB,EADC,YACKwB,EADL,oBACwBN,EADxB,oBADa,cAC9BG,EAD8B,yBAI7BA,EAASC,MAJoB,2CAAH,wDAOtBG,EAAsB,mCAAG,WAAMC,GAAN,uFACbN,IAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,iCAC8CQ,EAD9C,gCADa,cAC9BL,EAD8B,yBAI7BA,EAASC,KAAKb,SAJe,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/apiGetMovies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieAdditionalInfo } from 'services/apiGetMovies';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [movieReview, setMovieReview] = useState([]);\n\n  useEffect(() => {\n    const getApiMovieReviewsById = async id => {\n      try {\n        const keyword = 'reviews';\n        const apiMovieById = await getMovieAdditionalInfo(id, keyword);\n        setMovieReview(apiMovieById.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getApiMovieReviewsById(id);\n  }, [id]);\n  const element = movieReview.map(({ id, author, content }) => (\n    <li key={id}>\n      <h3>Author: {author}</h3>\n      <p>{content}</p>\n    </li>\n  ));\n  return (\n    <section>\n      <div>\n        <ul>\n          {element.length ? (\n            element\n          ) : (\n            <p>No one has left a review for this movie yet</p>\n          )}\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nReviews.propTypes = {\n  element: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'b28dcafbfbdc99f3059a27aaeb93fed6';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieAdditionalInfo = async (id, keyword) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/${keyword}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n"],"names":["id","useParams","useState","movieReview","setMovieReview","useEffect","getApiMovieReviewsById","getMovieAdditionalInfo","apiMovieById","results","console","log","element","map","author","content","length","BASE_URL","API_KEY","getTrendingMovies","axios","response","data","getMovieById","keyword","getMoviesBySearchQuery","searchQuery"],"sourceRoot":""}